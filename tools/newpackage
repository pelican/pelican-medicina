#!/usr/bin/perl
# Copyright 2000-2009 Chris Williams
# All rights reserved
# Create a new c++ project  package
#
use FindBin;
use lib "$FindBin::Bin";
use strict;
use FileHandle;
use DirHandle;
use CMakeModules;
use Cwd;

sub usage {
    print "Tool to create package structure\n";
    print "Usage:\n\tnewpackage <package_name>\n";
}

sub makedir {
    my $dir=shift;
    if( ! -e $dir ) {
        mkdir $dir,0755 or die "unable to create directory $dir";
    }
}

my $name=$ARGV[0];
if( ! defined $name ) {
    usage();
    exit 1;
}


# create package structure
makedir( $name );
makedir( $name."/src" );
my $cmfile=$name."/CMakeLists.txt";
my $fh=FileHandle->new(">$cmfile") or die "unable to create file $cmfile :$!";
print $fh "SUBPACKAGE($name)\n";
print $fh "set( ".$name."_src\n)\n";
print $fh "SUBPACKAGE_LIBRARY($name \${".$name."_src} )\n";
#print $fh "add_library($name \${".$name."_src} )\n";
#print $fh "target_link_libraries($name \${SUBPACKAGE_LIBRARIES} )\n";
#print $fh "install(TARGETS $name DESTINATION \${LIBRARY_INSTALL_DIR} )\n";
#print $fh "SUBPACKAGE_ADD_LIBRARIES($name)\n";
print $fh "\nadd_subdirectory(test)\n";
$fh->close();

# test directory
my $testdir=$name."/test";
my $testsrcdir=$testdir."/src";
my $testdatadir=$testdir."/data";
my $testincludedir=$testdir."/include";
makedir( $testdir );
makedir( $testsrcdir );
makedir( $testdatadir );
$cmfile=$testdir."/CMakeLists.txt";
my $tfh=FileHandle->new(">$cmfile") or die "unable to create file $cmfile :$!";
my $testname=$name."Test";
my $testmain=$testsrcdir."/".$testname.".cpp";
my $testsrcvar=$testname."_src";
my $testlibsrcvar=$testname."Utils_src";
print $tfh "SUBPACKAGE($testname $name)\n";
print $tfh "set(\n   ",$testlibsrcvar,"\n)\n\n";
print $tfh "set(\n   ",$testname,"_moc_headers\n)\n\n";
print $tfh "set(\n   ",$testsrcvar,"\n    src/$testname.cpp\n)\n\n";
print $tfh "#QT4_WRAP_CPP(",$testsrcvar," \${",$testname,"_moc_headers})\n";
print $tfh "#SUBPACKAGE_LIBRARY(",$testname,"Utils \${",$testlibsrcvar,"})\n";
print $tfh "#SUBPACKAGE_SET_EXTERNAL_LIBRARIES(\n#   \${QT_QTCORE_LIBRARY}\n#)\n";
print $tfh "add_executable($testname \${".$testname."_src} )\n";
print $tfh "target_link_libraries($testname \${SUBPACKAGE_LIBRARIES} \${CPPUNIT_LIBRARIES} )\n";
#print $tfh "add_test($testname \${EXECUTABLE_OUTPUT_PATH}/$testname )\n";
print $tfh "add_test($testname $testname )\n";
$tfh->close();

# test template
my $th=FileHandle->new(">$testmain") or die "unable to create file $testmain:$!";
print $th <<END;
#include <cppunit/CompilerOutputter.h>
#include <cppunit/XmlOutputter.h>
#include <cppunit/extensions/TestFactoryRegistry.h>
#include <cppunit/ui/text/TestRunner.h>

int main(int argc, char* argv[])
{
    // Get the top level suite from the registry
    CppUnit::Test *suite = CppUnit::TestFactoryRegistry::getRegistry().makeTest();

    // Adds the test to the list of test to run
    CppUnit::TextUi::TestRunner runner;
    runner.addTest( suite );

    // Change the default outputter to a compiler error format outputter
    runner.setOutputter( new CppUnit::CompilerOutputter(
                &runner.result(),
                std::cerr ) );
    // Run the tests.
    bool wasSucessful = runner.run();

    // Return error code 1 if the one of test failed.

    return wasSucessful ? 0 : 1;
}
END

# add the new module to the list
my $modfile="modules.cmake";
my $modules=CMakeModules->new($modfile);
$modules->update();
